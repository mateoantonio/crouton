{"name":"Crouton","tagline":"Chromium OS Universal Chroot Environment","body":"Crouton: Chromium OS Universal Chroot Environment\r\n=================================================\r\n\r\ncrouton is a set of scripts that bundle up into an easy-to-use,\r\nChromium OS-centric chroot generator. Currently Ubuntu and Debian are\r\nsupported (using debootstrap behind the scenes), but \"Chromium OS Debian,\r\nUbuntu, and Probably Other Distros Eventually Chroot Environment\" doesn't\r\nacronymize as well (crodupodece is admittedly pretty fun to say, though).\r\n\r\n\r\n\"crouton\"...an acronym?\r\n-----------------------\r\nIt stands for _ChRomium Os Universal chrooT envirONment_\r\n...or something like that. Do capitals really matter if caps-lock has been\r\n(mostly) banished, and the keycaps are all lower-case?\r\n\r\nMoving on...\r\n\r\n\r\nWho's this for?\r\n---------------\r\nAnyone who wants to run straight Linux on their Chromium OS device, and doesn't\r\ncare about physical security. You're also better off having some knowledge of\r\nLinux tools and the command line in case things go funny, but it's not strictly\r\nnecessary.\r\n\r\n\r\nWhat's a chroot?\r\n----------------\r\nLike virtualization, chroots provide the guest OS with their own, segregated\r\nfile system to run in, allowing applications to run in a different binary\r\nenvironment from the host OS. Unlike virtualization, you are *not* booting a\r\nsecond OS; instead, the guest OS is running using the Chromium OS system. The\r\nbenefit to this is that there is zero speed penalty since everything is run\r\nnatively, and you aren't wasting RAM to boot two OSes at the same time. The\r\ndownside is that you must be running the correct chroot for your hardware, the\r\nsoftware must be compatible with Chromium OS's kernel, and machine resources are\r\ninextricably tied between the host Chromium OS and the guest OS. What this means\r\nis that while the chroot cannot directly access files outside of its view, it\r\n*can* access all of your hardware devices, including the entire contents of\r\nmemory. A root exploit in your guest OS will essentially have unfettered access\r\nto the rest of Chromium OS.\r\n\r\n...but hey, you can run TuxRacer!\r\n\r\n\r\nPrerequisites\r\n-------------\r\nYou need a device running Chromium OS that has been switched to developer mode.\r\nNote that developer mode, in its default configuration, is *completely\r\ninsecure*, so don't expect a password in your chroot to keep anyone from your\r\ndata. crouton does support encrypting chroots, but the encryption is only as\r\nstrong as the quality of your passphrase. Consider this your warning.\r\n\r\nThat's it! Surprised?\r\n\r\n\r\nUsage\r\n-----\r\ncrouton is a powerful tool, and there are a *lot* of features, but basic usage\r\nis as simple as possible by design.\r\n\r\nIf you're just here to use crouton, you can grab the latest release from\r\n[goo.gl/fd3zc](http://goo.gl/fd3zc). Download it, pop open a shell\r\n(Ctrl+Alt+T, type `shell` and hit enter), and run `sh -e ~/Downloads/crouton` to\r\nsee the help text. See the \"examples\" section for some usage examples.\r\n\r\nIf you're modifying crouton, you'll probably want to clone or download the repo\r\nand then either run `installer/main.sh` directly, or use `make` to build your\r\nvery own `crouton`. You can also download the latest release, cd into the\r\nDownloads folder, and run `sh -e crouton -x` to extract out the juicy scripts\r\ncontained within, but you'll be missing build-time stuff like the Makefile.\r\n\r\ncrouton uses the concept of \"targets\" to decide what to install. While you will\r\nhave apt-get in your chroot, some targets may need minor hacks to avoid issues\r\nwhen running in the chrooted environment. As such, if you expect to want\r\nsomething that is fulfilled by a target, install that target when you make the\r\nchroot and you'll have an easier time.  Don't worry if you forget to include a\r\ntarget; you can always update the chroot later and add it. You can see the list\r\nof available targets by running `sh -e ~/Downloads/crouton -t help`.\r\n\r\nOnce you've set up your chroot, you can easily enter it using the\r\nnewly-installed `enter-chroot` command, or one of the target-specific\r\nstart\\* commands. Ta-da! That was easy.\r\n\r\n\r\nExamples\r\n--------\r\n\r\n### The easy way (assuming you want an Ubuntu LTS with Xfce)\r\n  1. Download `crouton`\r\n  2. Open a shell (Ctrl+Alt+T, type `shell` and hit enter) and run\r\n     `sudo sh -e ~/Downloads/crouton -t xfce`\r\n  3. Wait patiently and answer the prompts like a good person.\r\n  4. Done! You can jump straight to your Xfce session by running\r\n     `sudo enter-chroot startxfce4` or, as a special shortcut, `sudo startxfce4`\r\n  5. Cycle through Chromium OS and your running graphical chroots using\r\n     Ctrl+Alt+Shift+Back and Ctrl+Alt+Shift+Forward.\r\n  6. Exit the chroot by logging out of Xfce.\r\n\r\n### With encryption!\r\n  1. Add the `-e` parameter when you run crouton to create an encrypted chroot.\r\n  2. You can get some extra protection on your chroot by storing the decryption\r\n     key separately from the place the chroot is stored. Use the `-k` parameter\r\n     to specify a file or directory to store the keys in (such as a USB drive or\r\n     SD card) when you create the chroot. Beware that if you lose this file,\r\n     your chroot will not be decryptable. That's kind of the point, of course.\r\n\r\n### Hey now, Ubuntu 12.04 is pretty old; I'm young and hip\r\n  1. The `-r` parameter specifies which distro release you want to use.\r\n  2. Run `sh -e ~/Downloads/crouton -r list` to list the recognized releases and\r\n     which distros they belong to.\r\n\r\n### I don't always use Linux, but when I do, I use CLI\r\n  1. You can save a chunk of space by ditching X and just installing\r\n     command-line tools using `-t core` or `-t cli-extra`\r\n  2. Enter the chroot in as many crosh shells as you want simultaneously using\r\n     `sudo enter-chroot`\r\n  3. Use the [Crosh Window](http://goo.gl/eczLT) extension to keep Chromium OS\r\n     from eating standard keyboard shortcuts.\r\n\r\n### A new version of crouton came out; my chroot is therefore obsolete and sad\r\n  1. Check for updates, download the latest version, and see what's new by\r\n     running `croutonversion -u -d -c` from the chroot (run `croutonversion -h`\r\n     to see what those parameters actually do).\r\n  2. Exit the chroot and run `sudo sh -e ~/Downloads/crouton -u -n chrootname`.\r\n     It will update all installed targets.\r\n  3. You can use this with `-e` to encrypt a non-encrypted chroot, but make sure\r\n     you don't interrupt the operation.\r\n\r\n### A backup a day keeps the price-gouging data restoration services away\r\n  1. `sudo edit-chroot -b chrootname` backs up your chroot to a timestamped\r\n     tarball in the current directory. Chroots are named either via the `-n`\r\n     parameter when created or by the release name if -n was not specified.\r\n  2. `sudo edit-chroot -r chrootname` restores the chroot from the most recent\r\n     timestamped tarball. You can explicitly specify the tarball with `-f`\r\n  3. If your machine is new, powerwashed, or held upside-down and shaken, you\r\n     can use the crouton installer to restore a chroot and relevant scripts:\r\n     `sudo sh -e ~/Downloads/crouton -f mybackup.tar.gz`\r\n\r\n*Unlike with Chromium OS, the data in your chroot isn't synced to the cloud.*\r\n\r\n### This chroot's name/location/password/existence sucks. How to fix?\r\n  1. Check out the `edit-chroot` command; it likely does what you need it to do.\r\n  2. If you set a Chromium OS root password, you can change it with\r\n     `sudo chromeos-setdevpasswd`\r\n  3. You can change the password inside your chroot with `passwd`\r\n\r\n### I want to install the chroot to another location\r\n  1. Use `-p` to specify the directory in which to install the chroot and\r\n     scripts. Be sure to quote or escape spaces.\r\n  2. When entering the chroot, either specify the full path of the enter-chroot\r\n     or start* scripts (i.e. `sudo sh -e /path/to/enter-chroot`), or use the\r\n     `-c` parameter to explicitly specify the chroots directory.\r\n\r\n### Downloading bootstrap files over and over again is a waste of time\r\n  1. Download `crouton`\r\n  2. Open a shell (Ctrl+Alt+T, type `shell` and hit enter) and run\r\n     `sudo sh -e ~/Downloads/crouton -d -f ~/Downloads/mybootstrap.tar.bz2`\r\n  3. Include the `-r` parameter if you want to specify for which release to\r\n     prepare a bootstrap.\r\n  4. You can then create chroots using the tarball by running\r\n     `sudo sh -e ~/Downloads/crouton -f ~/Downloads/mybootstrap.tar.bz2`\r\n\r\n*This is the quickest way to create multiple chroots at once, since you won't\r\nhave to determine and download the bootstrap files every time.*\r\n\r\n### Targets are cool. Abusing them for fun and profit is even cooler\r\n  1. You can make your own target files (start by copying one of the existing\r\n     ones) and then use them with any version of crouton via the `-T` parameter.\r\n\r\n*This is great for automating common tasks when creating chroots.*\r\n\r\n### Help! I've created a monster that must be slain!\r\n  1. The delete-chroot command is your sword, shield, and only true friend.\r\n     `sudo delete-chroot evilchroot`\r\n  2. It's actually just a shortcut to `sudo edit-chroot -d evilchroot`, which I\r\n     suppose makes it a bit of a deceptive swis-army-knife friend...still good?\r\n\r\n\r\nTips\r\n----\r\n\r\n  * Chroots are cheap! Create multiple ones using `-n`, break them, then make\r\n    new, better ones!\r\n  * You can change the distro mirror from the default by using `-m`\r\n  * Behind a proxy? `-P` lets you specify one.\r\n  * A script is installed in your chroot called `brightness`. You can assign\r\n    this to keyboard shortcuts to adjust the brightness of the screen (e.g.\r\n    `brightness up`) or keyboard (e.g. `brightness k down`).\r\n  * Multiple monitors will work fine in the chroot, but you may have to switch\r\n    to Chromium OS and back to enable them.\r\n  * You can make commands run in the background so that you can close the\r\n    terminal. This is particularly useful for desktop environments: try running\r\n    `sudo startxfce4 -b`\r\n  * Want to disable Chromium OS's power management? Run `croutonpowerd -i`\r\n  * Only want power management disabled for the duration of a command?\r\n    `croutonpowerd -i command and arguments` will automatically stop inhibiting\r\n    power management when the command exits.\r\n  * Have a Pixel or two or 4.352 million? `-t touch` improves touch support.\r\n  * Want more tips? Check the [wiki](https://github.com/dnschneid/crouton/wiki).\r\n\r\n\r\nIssues?\r\n-------\r\nRunning another OS in a chroot is a pretty messy technique (although it's hidden\r\nbehind very pretty scripts), and these scripts are relatively new, so problems\r\nare not surprising. Check the issue tracker and file a bug if your issue isn't\r\nthere. When filing a new bug, include the output of `croutonversion` run from\r\ninside the chroot (if possible).\r\n\r\n\r\nCan I help?\r\n-----------\r\nYes!\r\n\r\n\r\nBut how?\r\n--------\r\nThere's a way For Everyone to help!\r\n\r\n  * Something broken? File a bug! Bonus points if you try to fix it. It helps if\r\n    you provide the output of `croutonversion` when you submit the bug.\r\n  * Want to try and break something? Look through [requests for testing](https://github.com/dnschneid/crouton/issues?labels=needstesting&state=open)\r\n    and then do your best to brutally rip the author's work to shreds.\r\n  * Look through [open issues](https://github.com/dnschneid/crouton/issues?state=open)\r\n    and see if there's a topic or application you happen to have experience\r\n    with. And then, preferably, share that experience with others.\r\n  * Find issues that need [wiki entries](https://github.com/dnschneid/crouton/issues?labels=needswiki&state=open,closed)\r\n    and add the relevant info to the [wiki](https://github.com/dnschneid/crouton/wiki).\r\n    Or just add things to/improve things in the wiki in general, but do try to\r\n    keep it relevant and organized.\r\n  * Really like a certain desktop environment? Open or comment on a bug with\r\n    steps to get things working well. Or better yet, create a pull request with\r\n    a new target.\r\n  * Feel like hacking around with Chromium OS integration? Fork crouton, improve\r\n    integration, and create a pull request.\r\n  * Is your distro underrepresented? Want to contribute to the elusive and\r\n    mythical beast known as \"croagh\"? Fork crouton, add the distro, and create a\r\n    pull request.\r\n  * Hang out in the \\#crouton IRC channel on freenode.net!\r\n\r\n\r\nSweet! Have some code!\r\n----------------------\r\nWhoa, thanks!  But before your code can be merged, you'll need to have signed\r\nthe [Individual Contributor License Agreement](https://developers.google.com/open-source/cla/individual#sign-electronically).\r\nDon't worry, it only takes a minute and you'll definitely get to keep your\r\nfirstborn, probably.  If you've already signed it for contributing to Chromium\r\nor Chromium OS, you're already done.\r\n\r\n\r\nLicense\r\n-------\r\ncrouton (including this eloquently-written README) is copyright &copy; 2014 The\r\nChromium OS Authors. All rights reserved. Use of the source code included here\r\nis governed by a BSD-style license that can be found in the LICENSE file in the\r\nsource tree.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}